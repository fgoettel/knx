[tool.poetry]
name = "projects"
version = "0.4.3" # Also update in projects/__init__.py AND logger
description = "Interact with ets/gpa/... project files."
authors = ["Fabian GÃ¶ttel <fabian.goettel@gmail.com>"]

[tool.poetry.dependencies]
python = "3.12.*"
defusedxml = "*"
mypy = "*"
nox-poetry = "*"
pylint = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-profiling = "*"
safety = "*"
ruff = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
asyncio_mode = "auto"
testpaths = [
    "test"
]

[tool.mypy]
python_version = "3.12"

[tool.ruff]
target-version = "py312"
line-length = 200

[tool.ruff.lint]
select = [ "ALL" ]
ignore = [
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN101", # Missing type annotation for self
    "COM812", # Conflicting with other rule
    "D203",   # One blank line before class
    "D212",   # Multi line summary first line
    "FIX002", # Line contains TODO, consider resolving the issue
    "ISC001", # Conflicting with other rules
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on the line following this TODO

]

[tool.ruff.lint.per-file-ignores]
"test/*" = [
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
    "F811",   # Redefinition of unused
    "N813",   # Camelcase `Factory` imported as lowercase `topo_factory`
    "N816",   # Variable `param_productRefId` in global scope should not be mixedCase
    "N817",   # CamelCase `ElementTree` imported as acronym `ET`
    "S101",   # Use of `assert` detected
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S314",   # Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
]

[tool.ruff.format]

[tool.coverage]
source = ["projects"]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if __name__ == .__main__.:",
    "pytest.main([.-x.])",
]